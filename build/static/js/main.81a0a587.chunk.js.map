{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","item","size","nodeDataArray","wrap","_context","prev","next","JSON","parse","map","node","font","objectSpread","abrupt","stop","_x","_x2","apply","this","arguments","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","userClick","_callee2","newData","_context2","state","old","sent","setState","new","_this2","react_default","createElement","className","type","placeholder","onChange","e","target","value","even","onClick","stringify","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAGMA,SAAI,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,EAAMC,GAAb,IAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXN,EAAOO,KAAKC,MAAMR,GACdE,EAAiBF,EAAKE,cAAcO,IAAI,SAAAC,GAC1C,IAAIC,EAAQD,EAAKC,KAAQV,EAAO,gBAAuB,GACvD,OAAOP,OAAAkB,EAAA,EAAAlB,CAAA,GACFgB,EADL,CAEEC,WANOP,EAAAS,OAAA,SAAAnB,OAAAkB,EAAA,EAAAlB,CAAA,GAUNM,EAVM,CAWTE,mBAXS,wBAAAE,EAAAU,SAAAf,MAAH,gBAAAgB,EAAAC,GAAA,OAAAvB,EAAAwB,MAAAC,KAAAC,YAAA,IAcWC,cACnB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAA5B,OAAA6B,EAAA,EAAA7B,CAAAwB,KAAAE,IAChBE,EAAA5B,OAAA8B,EAAA,EAAA9B,CAAAwB,KAAAxB,OAAA+B,EAAA,EAAA/B,CAAA0B,GAAAM,KAAAR,KAAMG,KASVM,UAVoBjC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAUR,SAAA8B,IAAA,IAAAC,EAAA,OAAAjC,EAAAC,EAAAM,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACUd,EAAK8B,EAAKS,MAAMC,IAAIV,EAAKS,MAAM9B,MADzC,OACN4B,EADMC,EAAAG,KAEVX,EAAKY,SAAS,CACZC,IAAKN,IAHG,wBAAAC,EAAAhB,SAAAc,MARRN,EAAKS,MAAQ,CACXC,IAAK,GACLG,IAAI,GACJlC,KAAM,GALQqB,wEAkBZ,IAAAc,EAAAlB,KACN,OACEmB,EAAAxC,EAAAyC,cAAA,OAAKC,UAAU,OACbF,EAAAxC,EAAAyC,cAAA,SAAOE,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAACC,GAAD,OAAMP,EAAKF,SAAS,CAACjC,KAAM0C,EAAEC,OAAOC,WACzFR,EAAAxC,EAAAyC,cAAA,YAAUG,YAAY,OAAOC,SAAU,SAACI,GAAD,OAAQV,EAAKF,SAAS,CAACF,IAAKc,EAAKF,OAAOC,WAC/ER,EAAAxC,EAAAyC,cAAA,UAAQS,QAAS7B,KAAKS,WAAtB,SACAU,EAAAxC,EAAAyC,cAAA,YAAUG,YAAY,OAAOI,MAAOtC,KAAKyC,UAAU9B,KAAKa,MAAMI,eAzBnCc,IAAMC,WCLnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAxC,EAAAyC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.81a0a587.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst data = async (item, size) => {\n  item = JSON.parse(item)\n  let nodeDataArray =  item.nodeDataArray.map(node => {\n    let font = (node.font) ? size + \"px\" + \" sans-serif\" : ''\n    return {\n      ...node,\n      font\n    }\n  })\n  return {\n    ...item,\n    nodeDataArray\n  }\n}\nexport default class App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      old: '',\n      new:'',\n      size: 0\n\n    }\n  }\n\nuserClick = async () =>{\n  let newData = await data(this.state.old,this.state.size)\n  this.setState({\n    new: newData\n  })\n\n}\n\nrender(){\n  return (\n    <div className=\"App\">\n      <input type=\"text\" placeholder=\"font size\" onChange={(e)=> this.setState({size: e.target.value})}/>\n      <textarea placeholder=\"json\" onChange={(even)=>this.setState({old: even.target.value})}/>\n      <button onClick={this.userClick}>Renew</button>\n      <textarea placeholder=\"json\" value={JSON.stringify(this.state.new)}/>\n    </div>\n  );\n}\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}